
element Neutron
{
  typedef Unsigned(3) Type;
  typedef Unsigned(6) Sn;


  Type molTypes[4];
  Type molDirs[4];
  Bool initialized = false;
  Unsigned(3) molTypesIndex = 0;
  Unsigned(3) molDirsIndex = 0;
  Bool canMove = true;
  Unsigned(12) polymerNum;
  Unsigned(6) polymerCount = 0;
  Bool secondDir;
  Sn newNeutronLoc;

  Bool enteredNewLoc = false;

  Void behave()
  {
    EventWindow ew;
    Random rand;
    if(!initialized)
    {
      //assignRandomPolymerNum(rand);
      //createRandomMolTypes(ew, rand);
      //molTypes[0] = 1;
      //molTypes[1] = 1;
      //molDirs[0] = 0;
      //molDirs[1] = 0;
      initialized = true;
    }
    if(molDirsIndex == 1 || molTypesIndex == 1) alignFirst();
    findResources(ew, rand);
    if(canMove)
    {
        moveRandomly(ew, rand);
    }

  }
  ARGB getColor(Unsigned selector)
  {
    ColorUtils cu;
    return cu.color(0xff, 0xff, 0xf);
  }
  Void assignRandomPolymerNum(Random rand)
  {
    polymerNum = (Unsigned(12)) rand.between(1, 4096);
  }

  Void createRandomMolTypes(EventWindow ew, Random rand)
  {

    for(Sn i =0; i<4; i++)
    {
      Sn randType = (Sn) rand.between(1, 36);
      if(randType <= 6)
      {
        molTypes[i] = 1;
      }
      else if(randType > 6 && randType <= 12)
      {
        molTypes[i] = 2;
      }
      else if(randType > 12 && randType <= 18)
      {
        molTypes[i] = 3;
      }
      else if(randType > 18 && randType <= 24)
      {
        molTypes[i] = 4;
      }
      else if(randType > 24 && randType <= 30)
      {
        molTypes[i] = 5;
      }
      else
      {
        molTypes[i] = 6;
      }
      molDirs[i]  = (Type) rand.between(0, 3);
    }
  }

  Void moveRandomly(EventWindow ew, Random rand)
  {
    Sn move = (Sn) rand.between(1, 8);
    if(ew[move] is Empty)
    {
      ew.swap(move, 0);
    }
  }

  Void findResources(EventWindow ew, Random rand)
  {
    Sn molCount = 0;
    Unsigned(12) molNum = 0;
    for(Sn i=1; i<=4; i++)
    {
      if(ew[i] is Proton)
      {
        Proton p = (Proton) ew[i];
        if(p.myState == 0)
        {
          if(p.moleculeCount > 1)
          {
            molCount = p.moleculeCount;
            molNum = p.moleculeNum;
            break;
          }
        }
      }
    }
    if(molCount != 0 && molNum != 0)
    {
      Sn molsToConsume[12];
      Sn count = 0;
      for(Sn i =0; i<41; i++)
      {
        if(ew[i] is Proton)
        {
          Proton resourceProton = (Proton) ew[i];
          if(resourceProton.moleculeNum == molNum)
          {
            count++;
            ew[i] = Empty.instanceof;
          }
        }
      }
      Sn protonsNeeded;
      Type molToMake = molTypes[molTypesIndex];
      if(molToMake == 1)
      {
        protonsNeeded = 4;
      }
      else if(molToMake == 2 || molToMake == 3)
      {
        protonsNeeded = 3;
      }
      if(count >= protonsNeeded)
      {
        if(molToMake == 1)
        {
          if(canCreateCarbon(ew, rand))
          {
            //molTypesIndex++;
            //molDirsIndex++;
          }
        }
        else if(molToMake == 2)
        {
          if(canCreateSquare(ew, rand))
          {
            //molTypesIndex++;
            //molDirsIndex++;
          }
        }
        else if(molToMake >= 3)
        {
          if(canCreateNitrogen(ew,rand, molTypes[molTypesIndex]))
          {
            //molTypesIndex++;
            //molDirsIndex++;
          }
        }
        canMove = false;

      }
    }
  }

  Bool canCreateSquare(EventWindow ew, Random rand)
  {
    Sn topLeft;
    Sn topRight;
    Sn bottomLeft;
    Sn bottomRight;
    if(molDirs[molDirsIndex] == 0)
    {
      topLeft = 9;
      topRight = 1;
      bottomLeft = 14;
      bottomRight = 6;
    }
    else if(molDirs[molDirsIndex] == 1)
    {
      topLeft = 10;
      topRight = 17;
      bottomLeft = 2;
      bottomRight = 7;
    }
    else if(molDirs[molDirsIndex] == 2)
    {
      topLeft = 3;
      topRight = 8;
      bottomLeft = 11;
      bottomRight = 18;
    }
    else if(molDirs[molDirsIndex] == 3)
    {
      topLeft = 4;
      topRight = 12;
      bottomLeft = 8;
      bottomRight = 20;
    }

    if(ew[topLeft] is Empty && ew[topRight] is Empty && ew[bottomLeft] is Empty && ew[bottomRight] is Empty)
    {
      Unsigned(12) moleNum;
      Proton tlProton;
      Proton trProton;
      Proton blProton;
      Proton brProton;
      Proton square[4];
      square[0] = tlProton;
      square[1] = trProton;
      square[2] = blProton;
      square[3] = brProton;

       moleNum = createMoleculeNum(rand);
      for(Sn i=0; i<4; i++)
      {
        square[i].myState = 2;
        square[i].moleculeNum = moleNum;
        square[i].moleculeCount = 4;
        square[i].bonded = true;
        square[i].partOfChain = true;
        square[i].polymerNum = polymerNum;
        square[i].canAddToPolymer = false;
      }

      square[0].xBonds[0] = 1;
      square[0].yBonds[0] = 0;
      square[0].xBonds[1] = 0;
      square[0].yBonds[1] = 1;
      square[0].moleculeDir = 1;

      square[1].xBonds[0] = -1;
      square[1].yBonds[0] = 0;
      square[1].xBonds[1] = 0;
      square[1].yBonds[1] = 1;
      square[1].moleculeDir = 2;

      square[2].xBonds[0] = 1;
      square[2].yBonds[0] = 0;
      square[2].xBonds[1] = 0;
      square[2].yBonds[1] = -1;
      square[2].moleculeDir = 3;

      square[3].xBonds[0] = -1;
      square[3].yBonds[0] = 0;
      square[3].xBonds[1] = 0;
      square[3].yBonds[1] = -1;
      square[3].moleculeDir = 4;

      ew[topLeft] = square[0];
      ew[topRight] = square[1];
      ew[bottomLeft] = square[2];
      ew[bottomRight] = square[3];

      polymerCount+= 4;

      if(molDirsIndex == 1 || molTypesIndex == 1)
      {

        newNeutronLoc = nextNeutronPos(ew, rand);
        Electron e;
        Proton p;
        e.moleculeNum1 = moleNum;
        Type previousLoc = molDirs[0];
        Sn check = (Sn) (previousLoc +1);
        if(ew[check] is Proton)
        {
          p = (Proton) ew[check];
        }
        else return false;
        e.moleculeNum2 = p.moleculeNum;
        e.molTypes[0] = molTypes[0];
        e.molTypes[1] = molTypes[1];
        e.geneNum = 1;
        e.polymerNum = polymerNum;
        molDirsIndex++;
        molTypesIndex++;
        ew[newNeutronLoc] = ew[0];
        ew[0] = e;
      }
      if(molDirsIndex == 2 || molTypesIndex == 2)
      {
        Sn nextNeutronLoc;
        molDirs[3] = molDirs[2];
        if(molDirs[3] == 0) nextNeutronLoc = 21;
        else if(molDirs[3] == 1) nextNeutronLoc =22;
        else if(molDirs[3] == 2) nextNeutronLoc = 23;
        else if(molDirs[3] == 3) nextNeutronLoc = 24;
        Electron e;
        e.molTypes[0] = molTypes[0];
        e.molTypes[1] = molTypes[1];
        e.molTypes[2] = molTypes[2];
        e.molTypes[3] = molTypes[3];
        e.polymerNum = polymerNum;
        molDirsIndex++;
        molTypesIndex++;
        ew[nextNeutronLoc] = ew[0];
        ew[0] = e;
      }
      molDirsIndex++;
      molTypesIndex++;
      return true;
    }
    else return false;
  }

  Bool canCreateCarbon(EventWindow ew, Random rand)
  {
    Sn top;
    Sn left;
    Sn right;
    Sn bottom;
    Sn middle;

    if(molDirs[molDirsIndex] == 0)
    {
      top = 13;
      left = 21;
      middle = 9;
      right = 1;
      bottom = 14;
    }
    else if(molDirs[molDirsIndex] == 1)
    {
      top = 22;
      left = 15;
      middle = 10;
      right = 17;
      bottom = 2;
    }
    else if(molDirs[molDirsIndex] == 2)
    {
      top = 3;
      left = 16;
      middle = 11;
      right = 18;
      bottom = 23;
    }
    else if(molDirs[molDirsIndex] == 3)
    {
      top = 19;
      left = 4;
      middle = 12;
      right = 24;
      bottom = 20;
    }
    if(ew[top] is Empty && ew[left] is Empty && ew[middle] is Empty && ew[right] is Empty && ew[bottom] is Empty)
    {
      Unsigned(12) moleNum;
      Proton tProton;
      Proton lProton;
      Proton miProton;
      Proton rProton;
      Proton bProton;
      Proton carbon[5];

      carbon[0] = tProton;
      carbon[1] = lProton;
      carbon[2] = bProton;
      carbon[3] = rProton;
      carbon[4] = miProton;

      moleNum = createMoleculeNum(rand);
      for(Sn i=0; i<5; i++)
      {
        carbon[i].myState = 1;
        carbon[i].moleculeNum = moleNum;
        carbon[i].moleculeCount = 5;
        carbon[i].bonded = true;
        carbon[i].partOfChain = true;
        carbon[i].polymerNum = polymerNum;
        carbon[i].canAddToPolymer = false;
      }

      carbon[0].xBonds[0] = 0;
      carbon[0].yBonds[0] = 1;
      carbon[0].moleculeDir = 2;

      carbon[1].xBonds[0] = 1;
      carbon[1].yBonds[0] = 0;
      carbon[1].moleculeDir = 1;

      carbon[2].xBonds[0] = 0;
      carbon[2].yBonds[0] = -1;
      carbon[2].moleculeDir = 3;

      carbon[3].xBonds[0] = -1;
      carbon[3].yBonds[0] = 0;
      carbon[3].moleculeDir = 4;

      carbon[4].xBonds[0] = 0;
      carbon[4].yBonds[0] = -1;
      carbon[4].xBonds[1] = 0;
      carbon[4].yBonds[1] = 1;
      carbon[4].xBonds[2] = 1;
      carbon[4].yBonds[2] = 0;
      carbon[4].xBonds[3] = -1;
      carbon[4].yBonds[3] = 0;
      carbon[2].moleculeDir = 0;

      ew[top] = carbon[0];
      ew[left] = carbon[1];
      ew[bottom] = carbon[2];
      ew[right] = carbon[3];
      ew[middle] = carbon[4];

      polymerCount+=5;

      if(molDirsIndex == 1 || molTypesIndex == 1)
      {

        newNeutronLoc = nextNeutronPos(ew, rand);
        Electron e;
        Proton p;
        e.moleculeNum1 = moleNum;
        Type previousLoc = molDirs[0];
        Sn check = (Sn) (previousLoc +1);
        if(ew[check] is Proton)
        {
          p = (Proton) ew[check];
        }
        else return false;
        e.moleculeNum2 = p.moleculeNum;
        e.molTypes[0] = molTypes[0];
        e.molTypes[1] = molTypes[1];
        e.geneNum = 1;
        molDirsIndex++;
        molTypesIndex++;
        ew[newNeutronLoc] = ew[0];
        ew[0] = e;
      }

      if(molDirsIndex == 2 || molTypesIndex == 2)
      {
        Sn nextNeutronLoc;
        molDirs[3] = molDirs[2];
        if(molDirs[3] == 0) nextNeutronLoc = 37;
        else if(molDirs[3] == 1) nextNeutronLoc =38;
        else if(molDirs[3] == 2) nextNeutronLoc = 39;
        else if(molDirs[3] == 3) nextNeutronLoc = 40;
        Electron e;
        e.molTypes[0] = molTypes[0];
        e.molTypes[1] = molTypes[1];
        e.molTypes[2] = molTypes[2];
        e.molTypes[3] = molTypes[3];
        e.polymerNum = polymerNum;
        molDirsIndex++;
        molTypesIndex++;
        ew[nextNeutronLoc] = ew[0];
        ew[0] = e;
      }
      molDirsIndex++;
      molTypesIndex++;
      return true;


    }
    else return false;
  }

  Bool canCreateNitrogen(EventWindow ew, Random rand, Unsigned(3) config)
  {
    Sn left;
    Sn middle;
    Sn right;
    Sn corner;
    if(molDirs[molDirsIndex] == 0)
    {
      if(config == 3)
      {
        corner = 30;
        left = 21;
        middle = 9;
        right = 1;
      }
      else if(config == 4)
      {
        corner = 29;
        left = 21;
        middle = 9;
        right = 1;
      }
      else if(config == 5)
      {
        corner = 1;
        left = 29;
        middle = 13;
        right = 5;
      }
      else if(config == 6)
      {
        corner = 1;
        left = 30;
        middle = 14;
        right = 6;
      }
    }
    else if(molDirs[molDirsIndex] == 1)
    {
      if(config == 3)
      {
        corner = 2;
        left = 10;
        middle = 17;
        right = 27;
      }
      else if(config == 4)
      {
        corner = 25;
        left = 13;
        middle = 5;
        right = 2;
      }
      else if(config == 5)
      {
        corner = 12;
        left = 2;
        middle = 7;
        right = 19;
      }
      else if(config == 6)
      {
        corner = 27;
        left = 2;
        middle = 7;
        right = 19;
      }
    }
    else if(molDirs[molDirsIndex] == 2)
    {
      if(config == 3)
      {
        corner = 26;
        left = 14;
        middle = 6;
        right = 3;
      }
      else if(config == 4)
      {
        corner = 3;
        left = 11;
        middle = 18;
        right = 28;
      }
      else if(config == 5)
      {
        corner = 28;
        left = 3;
        middle = 8;
        right = 20;
      }
      else if(config == 6)
      {
        corner = 3;
        left = 26;
        middle = 16;
        right = 11;
      }
    }
    else if(molDirs[molDirsIndex] == 3)
    {
      if(config == 3)
      {
        corner = 4;
        left = 7;
        middle = 19;
        right = 35;
      }
      else if(config == 4)
      {
        corner = 4;
        left = 8;
        middle = 20;
        right = 36;
      }
      else if(config == 5)
      {
        corner = 36;
        left = 24;
        middle = 12;
        right = 4;
      }
      else if(config == 6)
      {
        corner = 35;
        left = 4;
        middle = 12;
        right = 24;
      }
    }
    if(ew[corner] is Empty && ew[left] is Empty && ew[middle] is Empty && ew[right] is Empty)
    {
      Unsigned(12) moleNum;
      Proton lProton;
      Proton midProton;
      Proton rightProton;
      Proton cornerProton;
      Proton nitrogen[4];

      nitrogen[0] = lProton;
      nitrogen[1] = midProton;
      nitrogen[2] = rightProton;
      nitrogen[3] = cornerProton;

      moleNum = createMoleculeNum(rand);
      for(Sn i =0; i<4; i++)
      {
        nitrogen[i].myState = config;
        nitrogen[i].moleculeNum = moleNum;
        nitrogen[i].moleculeCount = 4;
        nitrogen[i].bonded = true;
        nitrogen[i].partOfChain = true;
        nitrogen[i].polymerNum = polymerNum;
        nitrogen[i].canAddToPolymer = false;
      }

      if(config == 3)
      {
        nitrogen[0].xBonds[0] = 0;
        nitrogen[0].yBonds[0] = 1;
        nitrogen[0].xBonds[1] = 1;
        nitrogen[0].yBonds[1] = 0;

        nitrogen[2].xBonds[0] = -1;
        nitrogen[2].yBonds[0] = 0;

        nitrogen[3].xBonds[0] = 0;
        nitrogen[3].yBonds[0] = -1;
      }
      else if(config == 4)
      {
        nitrogen[0].xBonds[0] = 0;
        nitrogen[0].yBonds[0] = -1;
        nitrogen[0].xBonds[1] = 1;
        nitrogen[0].yBonds[1] = 0;

        nitrogen[2].xBonds[0] = -1;
        nitrogen[2].yBonds[0] = 0;

        nitrogen[3].xBonds[0] = 0;
        nitrogen[3].yBonds[0] = 1;
      }
      else if(config == 5)
      {
        nitrogen[0].xBonds[0] = 1;
        nitrogen[0].yBonds[0] = 0;

        nitrogen[2].xBonds[0] = -1;
        nitrogen[2].yBonds[0] = 0;
        nitrogen[2].xBonds[1] = 0;
        nitrogen[2].yBonds[1] = 1;

        nitrogen[3].xBonds[0] = 0;
        nitrogen[3].yBonds[0] = -1;
      }
      else if(config == 6)
      {
        nitrogen[0].xBonds[0] = 1;
        nitrogen[0].yBonds[0] = 0;

        nitrogen[2].xBonds[0] = -1;
        nitrogen[2].yBonds[0] = 0;
        nitrogen[2].xBonds[1] = 0;
        nitrogen[2].yBonds[1] = -1;

        nitrogen[3].xBonds[0] = 0;
        nitrogen[3].yBonds[0] = 1;
      }

      nitrogen[1].xBonds[0] = 1;
      nitrogen[1].yBonds[0] = 0;
      nitrogen[1].xBonds[1] = -1;
      nitrogen[1].yBonds[1] = 1;

      ew[left] = nitrogen[0];
      ew[middle] = nitrogen[1];
      ew[right] = nitrogen[2];
      ew[corner] = nitrogen[3];

      polymerCount+= 4;

      if(molDirsIndex == 1 || molTypesIndex == 1)
      {

        newNeutronLoc = nextNeutronPos(ew, rand);
        Electron e;
        Proton p;
        e.moleculeNum1 = moleNum;
        Type previousLoc = molDirs[0];
        Sn check = (Sn) (previousLoc +1);
        if(ew[check] is Proton)
        {
          p = (Proton) ew[check];
        }
        else return false;
        e.moleculeNum2 = p.moleculeNum;
        e.molTypes[0] = molTypes[0];
        e.molTypes[1] = molTypes[1];
        e.geneNum = 1;
        molDirsIndex++;
        molTypesIndex++;
        ew[newNeutronLoc] = ew[0];
        ew[0] = e;
      }

      if(molDirsIndex == 2 || molTypesIndex == 2)
      {
        Sn nextNeutronLoc;
        if(molTypes[2] == 3)
        {
          if(molDirs[2] == 0)
          {
            molDirs[3] = 1;
            nextNeutronLoc = 5;
          }
          else if(molDirs[2] == 1)
          {
            molDirs[3] = 0;
            nextNeutronLoc = 5;
          }
          else if(molDirs[2] == 2)
          {
            molDirs[3] = 2;
            nextNeutronLoc = 11;
          }
          else if(molDirs[2] == 3)
          {
            molDirs[3] = 2;
            nextNeutronLoc = 8;
          }

        }
        else if(molTypes[2] == 4)
        {
          if(molDirs[2] == 0)
          {
            molDirs[3] = 2;
            nextNeutronLoc = 6;
          }
          else if(molDirs[2] == 1)
          {
            molDirs[3] = 1;
            nextNeutronLoc = 10;
          }
          else if(molDirs[2] == 2)
          {
            molDirs[3] = 0;
            nextNeutronLoc = 6;
          }
          else if(molDirs[2] == 3)
          {
            molDirs[3] = 1;
            nextNeutronLoc = 7;
          }
        }
        else if(molTypes[2] == 5)
        {
          if(molDirs[2] == 0)
          {
            molDirs[3] = 2;
            nextNeutronLoc = 6;
          }
          else if(molDirs[2] == 1)
          {
            molDirs[3] = 3;
            nextNeutronLoc = 7;
          }
          else if(molDirs[2] == 2)
          {
            molDirs[3] = 0;
            nextNeutronLoc = 6;
          }
          else if(molDirs[2] == 3)
          {
            molDirs[3] = 1;
            nextNeutronLoc = 7;
          }
        }
        else if(molTypes[2] == 6)
        {
          if(molDirs[2] == 0)
          {
            molDirs[3] = 1;
            nextNeutronLoc = 5;
          }
          else if(molDirs[2] == 1)
          {
            molDirs[3] = 0;
            nextNeutronLoc = 5;
          }
          else if(molDirs[2] == 2)
          {
            molDirs[3] = 3;
            nextNeutronLoc = 8;
          }
          else if(molDirs[2] == 3)
          {
            molDirs[3] = 1;
            nextNeutronLoc = 7;
          }
        }

        Electron e;
        e.molTypes[0] = molTypes[0];
        e.molTypes[1] = molTypes[1];
        e.molTypes[2] = molTypes[2];
        e.molTypes[3] = molTypes[3];
        e.polymerNum = polymerNum;
        molDirsIndex++;
        molTypesIndex++;
        ew[nextNeutronLoc] = ew[0];
        ew[0] = e;
      }

      molDirsIndex++;
      molTypesIndex++;
      return true;
    }
    else
    {
      return false;
    }

  }

 Sn nextNeutronPos(EventWindow ew, Random rand)
  {
     enteredNewLoc = true;
     Sn nextLoc = 60;
     Sn nextPos;
     Type previous = (Type) (molTypesIndex -1);
     Type last = molTypes[previous];
     Type current = molTypes[molTypesIndex];

     if(molTypesIndex == 1 || molDirsIndex == 1)
     {
       alignSecond(rand);
       if(molDirs[1] == 0 || molDirs[1] == 3)
       {
         if(secondDir)
         {
           if(last == 1)//carbon
           {
             if(molDirs[2] == 0) nextLoc = 37;
             else if (molDirs[2] == 1) nextLoc = 25;
             else if (molDirs[2] == 2) nextLoc = 26;
           }
           else if(last == 2)//oxygen
           {
             if(molDirs[2] == 0) nextLoc = 21;
             else if(molDirs[2] == 1) nextLoc = 13;
             else if(molDirs[2] == 2) nextLoc = 26;
           }
           else if(last == 3)
           {
             molDirs[2] = 1;
             nextLoc = 5;
           }
           else if(last == 4)
           {
             molDirs[2] = 2;
             nextLoc = 6;
           }
           else if(last == 5)
           {
             molDirs[2] = 2;
             nextLoc = 6;
           }
           else if(last == 6)
           {
             molDirs[2] = 1;
             nextLoc = 5;
           }
         }
         else
         {
           if(last == 1)
           {
             if(molDirs[2] == 1) nextLoc =27;
             else if(molDirs[2] == 2) nextLoc = 28;
             else if(molDirs[2] == 3) nextLoc = 40;
           }
           else if(last == 2)
           {
             if(molDirs[2] == 1) nextLoc =19;
             else if(molDirs[2] == 2) nextLoc = 28;
             else if(molDirs[2] == 3) nextLoc = 24;
           }
           else if(last == 3 || last == 5)
           {
             molDirs[2] = 2;
             nextLoc = 8;
           }
           else if(last ==4 || last == 6)
           {
             molDirs[2] = 2;
             nextLoc = 6;
           }
         }
       }
       else
       {
         if(!secondDir)
         {
           if(last == 1)
           {
             if(molDirs[2] == 0) nextLoc =26;
             else if(molDirs[2] == 2) nextLoc = 39;
             else if(molDirs[2] == 3) nextLoc = 28;
           }
           else if(last == 2)
           {
             if(molDirs[2] == 0) nextLoc = 6;
             else if(molDirs[2] == 2) nextLoc = 23;
             else if(molDirs[2] == 3) nextLoc = 20;
           }
           else if(last == 3 || last == 6)
           {
             molDirs[2] = 3;
             nextLoc = 8;
           }
           else if(last == 4 || last == 5)
           {
             molDirs[2] = 0;
             nextLoc = 6;
           }
         }
         else
         {
           if(last == 1)
           {
             if(molDirs[2] == 0) nextLoc =25;
             else if(molDirs[2] == 1) nextLoc = 38;
             else if(molDirs[2] == 3) nextLoc = 27;
           }
           else if(last == 2)
           {
             if(molDirs[2] == 0) nextLoc = 15;
             else if(molDirs[2] == 1) nextLoc = 22;
             else if(molDirs[2] == 3) nextLoc = 27;
           }
           else if(last == 3 || last == 6)
           {
             molDirs[2] = 0;
             nextLoc = 5;
           }
           else if(last == 4)
           {
             molDirs[2] = 3;
             nextLoc = 7;
           }
           else if (last == 5)
           {
             molDirs[2] = 3;
             nextLoc = 40;
           }
         }
       }
     }

     return nextLoc;
  }

  Void alignFirst()
  {
    if(molDirs[0] == 0) molDirs[1] = 3;
    else if(molDirs[0] == 1) molDirs[1] = 2;
    else if(molDirs[0] == 2) molDirs[1] = 1;
    else if(molDirs[0] == 3) molDirs[1] = 0;
  }

  Void alignSecond(Random rand)
  {

    Sn num = (Sn)rand.between(0, 100);
    if(num < 50)
    {
      secondDir = true;
    }
    else
    {
      secondDir = false;
    }

    if(molTypes[1] == 0 || molTypes[1] == 3)
    {
      if(secondDir)
      {
        if(molDirs[2] == 3)
        {
          molDirs[2] = (Type) rand.between(0, 2);
        }
      }
      else
      {
        if(molDirs[2] == 0)
        {
          molDirs[2] = (Type) rand.between(1, 3);
        }
      }
    }
    else
    {
      if(secondDir)
      {
        if(molDirs[2] == 1)
        {
           Int rNum = rand.between(1, 99);
           Type nDir;
           if(rNum < 34)
           {
             nDir = 0;
           }
           else if(rNum > 66)
           {
             nDir = 2;
           }
           else
           {
             nDir = 3;
           }
           molDirs[2] = nDir;
        }
      }
      else
      {
        if(molDirs[2] == 2)
        {
          Int rNum = rand.between(1, 99);
          Type nDir;
          if(rNum < 34)
          {
            nDir = 0;
          }
          else if(rNum > 66)
          {
            nDir = 1;
          }
          else
          {
            nDir = 3;
          }
          molDirs[2] = nDir;
        }
      }
    }


  }

  Unsigned(12) createMoleculeNum(Random rand)
  {
    return (Unsigned(12)) rand.between(1, 4096);
  }
}
